col1=subset_matrix[,1]
Dat1=subset_matrix[,-1]
row.names(subset_matrix)=col1
View(Dat1)
View(subset_matrix)
col1=subset_matrix[,1]
col1
View(Dat1)
col1=subset_matrix[,1]
Dat1=subset_matrix[,-1]
row.names(Dat1)=col1
View(Dat1)
cat('\14')
library("readxl")
#library("edgeR")
library("rtracklayer")
library("plyr")
setwd('/Users/macbook/Desktop/Bioinf/Part-c')
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
col1=Dat2[,1]
subset_matrix=Dat2[,-1]
row.names(subset_matrix)=col1
col1=Dat1[,1]
main_study_matrix=Dat1[,-1]
row.names(main_study_matrix)=col1
#library("edgeR")
library("rtracklayer")
library("plyr")
setwd('/Users/macbook/Desktop/Bioinf/Part-c')
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
col1=Dat2[,1]
subset_matrix=Dat2[,-1]
row.names(subset_matrix)=col1
col2=Dat1[,1]
main_study_matrix=Dat1[,-1]
row.names(main_study_matrix)=col2
View(subset_matrix)
View(Dat2)
cat('\14')
library("readxl")
#library("edgeR")
library("rtracklayer")
library("plyr")
setwd('/Users/macbook/Desktop/Bioinf/Part-c')
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
col1=Dat2[,1]
subset_matrix=Dat2[,-1]
row.names(subset_matrix)=col1
col2=Dat1[,1]
main_study_matrix=Dat1[,-1]
row.names(main_study_matrix)=col2
View(Dat1)
View(Dat2)
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
Dat1=Dat1[!duplicated(Dat1$gene), ] # remove repeated gene symbols
Dat2=Dat2[!duplicated(Dat2$GeneEns), ] # remove repeated gene symbols
cat('\14')
library("readxl")
#library("edgeR")
library("rtracklayer")
library("plyr")
setwd('/Users/macbook/Desktop/Bioinf/Part-c')
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
Dat1=Dat1[!duplicated(Dat1$gene), ] # remove repeated gene symbols
Dat2=Dat2[!duplicated(Dat2$GeneEns), ] # remove repeated gene symbols
col1=Dat2[,1]
subset_matrix=Dat2[,-1]
row.names(subset_matrix)=col1
col2=Dat1[,1]
main_study_matrix=Dat1[,-1]
row.names(main_study_matrix)=col2
View(main_study_matrix)
View(subset_matrix)
gencode_file = 'gencode.v41.annotation.gtf.gz'
gtf = import.gff(gencode_file, format = 'gtf', genome = 'GRCh38.p13', feature.type = 'exon')
grl = reduce(split(gtf, elementMetadata(gtf)$gene_id))
gene_lengths = ldply(grl, function(x) {
#sum up the length of individual exons
return(c('gene_length' = sum(width(x))))
}, .id = 'ensembl_gene_id')
View(grl)
View(gtf)
View(gtf)
genetype = unique(elementMetadata(gtf)[, c('gene_id', 'gene_type','gene_name')])
colnames(genetype)[1] = 'ensembl_gene_id'
gene_lengths = merge(genetype, gene_lengths)
gene_lengths$ensembl_gene_id = gsub('\\.[0-9]*', '', gene_lengths$ensembl_gene_id)
gene_lengths
View(gene_lengths)
row1=row.names(subset_matrix)
indx=which(gene_lengths@listData$ensembl_gene_id %in% row1 )
ens=gene_lengths@listData$ensembl_gene_id[indx]
indx2=which(row1 %in% ens )
Gene_Symbol  <- gene_lengths@listData$gene_name[indx]
Gene_Symbol <-as.data.frame(Gene_Symbol)
Gene_Type  <- gene_lengths@listData$gene_type[indx]
Gene_Type <-as.data.frame(Gene_Type)
full=cbind(Gene_Type,Gene_Symbol,subset_matrix[indx2,])
View(full)
#Extract Expression and add Gene Type and Gene_Symbol
row1=row.names(main_study_matrix)
indx=which(gene_lengths@listData$gene_name %in% row1 )
ens=gene_lengths@listData$gene_name[indx]
indx2=which(row1 %in% ens )
Gene_Symbol  <- gene_lengths@listData$ensembl_gene_id[indx]
Gene_Symbol <-as.data.frame(Gene_Symbol)
full=cbind(Gene_Symbol,main_study_matrix[indx2,])
row1=row.names(main_study_matrix)
row1
gene_lengths@listData
gene_lengths@listData$gene_name
ens
ens
#Extract Expression and add Gene Type and Gene_Symbol
row1=row.names(main_study_matrix)
indx=which(gene_lengths@listData$gene_name %in% row1 )
ens=gene_lengths@listData$gene_name[indx]
indx2=which(row1 %in% ens )
Gene_Symbol  <- gene_lengths@listData$ensembl_gene_id[indx]
Gene_Symbol <-as.data.frame(Gene_Symbol)
Gene_Type  <- gene_lengths@listData$gene_type[indx]
Gene_Type <-as.data.frame(Gene_Type)
full=cbind(Gene_Type,Gene_Symbol,main_study_matrix[indx2,])
#Extract Expression and add Gene Type and Gene_Symbol
row1=row.names(subset_matrix)
indx=which(gene_lengths@listData$ensembl_gene_id %in% row1 )
ens=gene_lengths@listData$ensembl_gene_id[indx]
indx2=which(row1 %in% ens )
Gene_Symbol  <- gene_lengths@listData$gene_name[indx]
Gene_Symbol <-as.data.frame(Gene_Symbol)
Gene_Type  <- gene_lengths@listData$gene_type[indx]
Gene_Type <-as.data.frame(Gene_Type)
full=cbind(Gene_Type,Gene_Symbol,subset_matrix[indx2,])
View(full)
full=cbind(Gene_Type,Gene_Symbol,subset_matrix[indx2,])
subset_matrix <= full
subset_matrix <- full
View(subset_matrix)
cat('\14')
library("readxl")
#library("edgeR")
library("rtracklayer")
library("plyr")
setwd('/Users/macbook/Desktop/Bioinf/Part-c')
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
Dat1=Dat1[!duplicated(Dat1$gene), ] # remove repeated gene symbols
Dat2=Dat2[!duplicated(Dat2$GeneEns), ] # remove repeated gene symbols
########################
gencode_file = 'gencode.v41.annotation.gtf.gz'
gtf = import.gff(gencode_file, format = 'gtf', genome = 'GRCh38.p13', feature.type = 'exon')
cat('\14')
library("readxl")
#library("edgeR")
library("rtracklayer")
library("plyr")
setwd('/Users/macbook/Desktop/Bioinf/Part-c')
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
Dat1=Dat1[!duplicated(Dat1$gene), ] # remove repeated gene symbols
Dat2=Dat2[!duplicated(Dat2$GeneEns), ] # remove repeated gene symbols
########################
gencode_file = 'gencode.v41.annotation.gtf.gz'
gtf = import.gff(gencode_file, format = 'gtf', genome = 'GRCh38.p13', feature.type = 'exon')
cat('\14')
library("readxl")
#library("edgeR")
library("rtracklayer")
library("plyr")
setwd('/Users/macbook/Desktop/Bioinf/Part-c')
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
Dat1=Dat1[!duplicated(Dat1$gene), ] # remove repeated gene symbols
Dat2=Dat2[!duplicated(Dat2$GeneEns), ] # remove repeated gene symbols
########################
gencode_file = 'gencode.v41.annotation.gtf.gz'
gtf = import.gff(gencode_file, format = 'gtf', genome = 'GRCh38.p13', feature.type = 'exon')
grl = reduce(split(gtf, elementMetadata(gtf)$gene_id))
gene_lengths = ldply(grl, function(x) {
#sum up the length of individual exons
return(c('gene_length' = sum(width(x))))
}, .id = 'ensembl_gene_id')
genetype = unique(elementMetadata(gtf)[, c('gene_id', 'gene_type','gene_name')])
colnames(genetype)[1] = 'ensembl_gene_id'
gene_lengths = merge(genetype, gene_lengths)
gene_lengths$ensembl_gene_id = gsub('\\.[0-9]*', '', gene_lengths$ensembl_gene_id)
gene_lengths
# Assuming Dat1 has gene symbols as row names
gene_symbols = row.names(Dat1)
# Find indices where gene symbols from your data match the gene symbols in the genetype data frame
indx = which(genetype$gene_name %in% gene_symbols)
# Extract the corresponding Ensembl gene IDs
ensembl_gene_ids = genetype$ensembl_gene_id[indx]
ensembl_gene_ids <- as.data.frame(ensembl_gene_ids)
row.names(ensembl_gene_ids) <- genetype$gene_name[indx] # Set gene symbols as row names
# Get the corresponding Gene Types based on matched indices
Gene_Type = genetype$gene_type[indx]
Gene_Type <- as.data.frame(Gene_Type)
row.names(Gene_Type) <- genetype$gene_name[indx] # Set gene symbols as row names
# Combine your data with the Ensembl IDs and Gene Types
Dat1_with_ensembl <- cbind(ensembl_gene_ids, Gene_Type, Dat1)
cat('\14')
library("readxl")
#library("edgeR")
library("rtracklayer")
library("plyr")
setwd('/Users/macbook/Desktop/Bioinf/Part-c')
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
Dat1=Dat1[!duplicated(Dat1$gene), ] # remove repeated gene symbols
Dat2=Dat2[!duplicated(Dat2$GeneEns), ] # remove repeated gene symbols
col1=Dat2[,1]
subset_matrix=Dat2[,-1]
row.names(subset_matrix)=col1
col2=Dat1[,1]
main_study_matrix=Dat1[,-1]
row.names(main_study_matrix)=col2
########################
gencode_file = 'gencode.v41.annotation.gtf.gz'
gtf = import.gff(gencode_file, format = 'gtf', genome = 'GRCh38.p13', feature.type = 'exon')
grl = reduce(split(gtf, elementMetadata(gtf)$gene_id))
gene_lengths = ldply(grl, function(x) {
#sum up the length of individual exons
return(c('gene_length' = sum(width(x))))
}, .id = 'ensembl_gene_id')
cat('\14')
library("readxl")
#library("edgeR")
library("rtracklayer")
library("plyr")
setwd('/Users/macbook/Desktop/Bioinf/Part-c')
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat2 = read.table("merged_data.txt",sep='\t', header = TRUE)
Dat1=Dat1[!duplicated(Dat1$gene), ] # remove repeated gene symbols
Dat2=Dat2[!duplicated(Dat2$GeneEns), ] # remove repeated gene symbols
col1=Dat2[,1]
subset_matrix=Dat2[,-1]
row.names(subset_matrix)=col1
########################
gencode_file = 'gencode.v41.annotation.gtf.gz'
gtf = import.gff(gencode_file, format = 'gtf', genome = 'GRCh38.p13', feature.type = 'exon')
grl = reduce(split(gtf, elementMetadata(gtf)$gene_id))
gene_lengths = ldply(grl, function(x) {
#sum up the length of individual exons
return(c('gene_length' = sum(width(x))))
}, .id = 'ensembl_gene_id')
genetype = unique(elementMetadata(gtf)[, c('gene_id', 'gene_type','gene_name')])
colnames(genetype)[1] = 'ensembl_gene_id'
gene_lengths = merge(genetype, gene_lengths)
gene_lengths$ensembl_gene_id = gsub('\\.[0-9]*', '', gene_lengths$ensembl_gene_id)
gene_lengths
# Assuming Dat1 has gene symbols as row names
gene_symbols = row.names(Dat1)
# Find indices where gene symbols from your data match the gene symbols in the genetype data frame
indx = which(genetype$gene_name %in% gene_symbols)
# Extract the corresponding Ensembl gene IDs
ensembl_gene_ids = genetype$ensembl_gene_id[indx]
ensembl_gene_ids <- as.data.frame(ensembl_gene_ids)
row.names(ensembl_gene_ids) <- genetype$gene_name[indx] # Set gene symbols as row names
# Get the corresponding Gene Types based on matched indices
Gene_Type = genetype$gene_type[indx]
Gene_Type <- as.data.frame(Gene_Type)
row.names(Gene_Type) <- genetype$gene_name[indx] # Set gene symbols as row names
# Combine your data with the Ensembl IDs and Gene Types
Dat1_with_ensembl <- cbind(ensembl_gene_ids, Gene_Type, Dat1)
full=cbind(Gene_Type,Gene_Symbol,subset_matrix[indx2,])
Gene_Symbol  <- gene_lengths@listData$gene_name[indx]
Gene_Symbol <-as.data.frame(Gene_Symbol)
Gene_Type  <- gene_lengths@listData$gene_type[indx]
Gene_Type <-as.data.frame(Gene_Type)
full=cbind(Gene_Type,Gene_Symbol,subset_matrix[indx2,])
ndx2=which(row1 %in% ens )
row1=row.names(subset_matrix)
indx=which(gene_lengths@listData$ensembl_gene_id %in% row1 )
ens=gene_lengths@listData$ensembl_gene_id[indx]
indx2=which(row1 %in% ens )
Gene_Symbol  <- gene_lengths@listData$gene_name[indx]
Gene_Symbol <-as.data.frame(Gene_Symbol)
Gene_Type  <- gene_lengths@listData$gene_type[indx]
Gene_Type <-as.data.frame(Gene_Type)
full=cbind(Gene_Type,Gene_Symbol,subset_matrix[indx2,])
subset_matrix <- full
View(subset_matrix)
View(main_study_matrix)
View(main_study_matrix)
Dat1 = read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat1=Dat1[!duplicated(Dat1$gene), ] # remove repeated gene symbols
main_study_matrix=Dat1[!duplicated(Dat1$gene), ] # remove repeated gene symbols
rownames(main_study_matrix) <- main_study_matrix$gene
rownames(subset_matrix) <- subset_matrix$Gene_Symbol
rownames(main_study_matrix) <- main_study_matrix$gene
rownames(subset_matrix) <- subset_matrix$Gene_Symbol
subset_matrix=subset_matrix[!duplicated(subset_matrix$Gene_Symbol), ] #
# Make sure both matrices have ensemble gene ids as row names
rownames(main_study_matrix) <- main_study_matrix$gene
rownames(subset_matrix) <- subset_matrix$Gene_Symbol
comparison_matrix <- main_study_matrix[, c('gene', 'X48C_COUNT', 'X48N_COUNT')]
View(comparison_matrix)
common_genes <- intersect(rownames(subset_matrix), rownames(comparison_matrix))
write.table(common_genes, "common_genes.txt", sep = "\t", row.names = FALSE, quote = FALSE)
subset_matrix <- subset_matrix[common_genes,]
comparison_matrix <- comparison_matrix[common_genes,]
View(comparison_matrix)
View(subset_matrix)
comparison_ratio <- subset_matrix[,'X48C_COUNT'] / comparison_matrix[,'X48C_COUNT']
summary(comparison_ratio)
comparison_ratio <- subset_matrix[,'X48N_COUNT'] / comparison_matrix[,'X48N_COUNT']
summary(comparison_ratio)
################## RNASeq Normalization (edgeR) ##################
cat('\14')
library("readxl")
library("edgeR")
setwd('/Users/macbook/Desktop/Bioinf/Part-d')
Dat=read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat1=Dat[!duplicated(Dat$gene), ] # remove repeated gene symbols
# set the first column as gene symbols
col1<-Dat1$gene
Dat2<-Dat1[,-1]
Dat2 = as.data.frame(Dat2)
row.names(Dat2) <- col1
################## RNASeq Normalization (edgeR) ##################
cat('\14')
library("readxl")
library("edgeR")
setwd('/Users/macbook/Desktop/Bioinf/Part-d')
Dat=read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat1=Dat[!duplicated(Dat$gene), ] # remove repeated gene symbols
# set the first column as gene symbols
col1<-Dat1$gene
Dat2<-Dat1[,-1]
Dat2 = as.data.frame(Dat2)
row.names(Dat2) <- col1
View(Dat2)
################## RNASeq Normalization (edgeR) ##################
cat('\14')
library("readxl")
library("edgeR")
setwd('/Users/macbook/Desktop/Bioinf/Part-d')
Dat=read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat1=Dat[!duplicated(Dat$gene), ] # remove repeated gene symbols
# set the first column as gene symbols
col1<-Dat1$gene
Dat2<-Dat1[,-1]
Dat2 = as.data.frame(Dat2)
row.names(Dat2) <- col1
# For the raw count data
count_columns <- grep("_COUNT$", names(Dat2), value = TRUE)
DatRaw <- Dat2[, c(count_columns)]
# For the normalized TPM data
tpm_columns <- grep("_TPM$", names(Dat2), value = TRUE)
DatNorm <- Dat2[, c(tpm_columns)]
Expression_Raw = as.matrix(DatRaw)
Expression_Norm = as.matrix(DatNorm)
means <- rowMeans(Expression_Raw)
filter <- means >= 1
table(filter)
keepSamples = (filter==TRUE)
geneCountHigh_M_Raw <- Expression_Raw[keepSamples,]
dim(geneCountHigh_M_Raw)
means <- rowMeans(Expression_Norm)
filter <- means >= 1
table(filter)
keepSamples = (filter==TRUE)
geneCountHigh_M_Norm <- Expression_Norm[keepSamples,]
dim(geneCountHigh_M_Norm)
#-------------------- TRAIT --------------------#
header_names <- names(DatRaw)
# Use regular expressions to create a table with the header and the associated tag
labels <- sub(".*([CN])_.*", "\\1", header_names)
Group_Raw <- data.frame(Header = header_names, Label = labels)
header_names <- names(DatNorm)
labels <- sub(".*([CN])_.*", "\\1", header_names)
Group_Norm <- data.frame(Header = header_names, Label = labels)
#-------------------- TMM-Normalization --------------------#
dgellist <- DGEList(counts=geneCountHigh_M_Norm, group=factor(Group_Norm$Label))
dgellist <- calcNormFactors(dgellist,method = "TMM") #method ="upperquartile"
dgellist <- estimateCommonDisp(dgellist)
dgellist <-estimateTagwiseDisp(dgellist,trend="movingave")
Normalexpr <-dgellist$pseudo.counts
lNormexpr <- log(Normalexpr + 1)
#-------------------- QC & Plots --------------------#
pdf(file='Heatmap.pdf',width = 10,height=10)
heatmap(cor(lNormexpr))
dev.off()
# Boxplot Before Normalization
pdf(file='B_boxplot.pdf',width = 10,height=10)
par(mar=c(14,5,1,1))
boxplot(Expression_Raw,las = 2,ylim = c(0, 20),labels=FALSE,col="green")
mtext("Normal samples \n Before normalization",side=2,line = 2)
dev.off()
# Boxplot After Normalization
pdf(file='A_boxplot.pdf',width = 30,height=10)
par(mar=c(14,5,1,1))
boxplot(lNormexpr,las = 2,col="green",ylim = c(0, 20))
mtext("After normalization",side=2,line = 2)
dev.off()
pdf(file='MDS.pdf',width = 30,height=10)
plotMDS(dgellist)
dev.off()
#-------------------- Save 2 File --------------------#
write.table(lNormexpr, "Full_Normalized.csv",row.names=TRUE, na="",col.names=TRUE, sep=",")
write.table(lNormexpr, "Full_Normalized.txt", sep="\t",row.names=T, col.names=T, quote=F)
#-------------------- DEG Analysis (exact test) --------------------#
dge <- DGEList(counts=lNormexpr,group=factor(Group_Norm$Label))
dge <- estimateCommonDisp(dge)
dge <- estimateTagwiseDisp(dge)
# Perform the exact test
et <- exactTest(dge, pair=c(1, 2))
# Get the top DEGs across all genes
DEG <- topTags(et, n=Inf)$table
# Filter DEGs for those with |log2FC| > 1.5
DEG_1_5 <- DEG[abs(DEG$logFC) > 1.5, ]
# Calculate the percentage
percentage_DEG_1_5 <- nrow(DEG_1_5) / nrow(DEG) * 100
print(percentage_DEG_1_5)
# Save the full DEG table and the filtered DEG table to files
write.table(DEG, "DEG_FULL_et.csv", row.names=TRUE, col.names=NA, sep=",")
write.table(DEG, "DEG_FULL_et.txt", row.names=TRUE, col.names=NA, sep="\t", quote=FALSE)
View(geneCountHigh_M_Norm)
View(Expression_Raw)
View(dgellist)
################## RNASeq Normalization (edgeR) ##################
cat('\14')
library("readxl")
library("edgeR")
setwd('/Users/macbook/Desktop/Bioinf/Part-d')
Dat=read.table('GSE104836_gene_exp.txt',sep='\t', header = TRUE)
Dat1=Dat[!duplicated(Dat$gene), ] # remove repeated gene symbols
# set the first column as gene symbols
col1<-Dat1$gene
Dat2<-Dat1[,-1]
Dat2 = as.data.frame(Dat2)
row.names(Dat2) <- col1
# For the raw count data
count_columns <- grep("_COUNT$", names(Dat2), value = TRUE)
DatRaw <- Dat2[, c(count_columns)]
# For the normalized TPM data
tpm_columns <- grep("_TPM$", names(Dat2), value = TRUE)
DatNorm <- Dat2[, c(tpm_columns)]
Expression_Raw = as.matrix(DatRaw)
Expression_Norm = as.matrix(DatNorm)
means <- rowMeans(Expression_Raw)
filter <- means >= 1
table(filter)
keepSamples = (filter==TRUE)
geneCountHigh_M_Raw <- Expression_Raw[keepSamples,]
dim(geneCountHigh_M_Raw)
means <- rowMeans(Expression_Norm)
filter <- means >= 1
table(filter)
keepSamples = (filter==TRUE)
geneCountHigh_M_Norm <- Expression_Norm[keepSamples,]
dim(geneCountHigh_M_Norm)
#-------------------- TRAIT --------------------#
header_names <- names(DatRaw)
# Use regular expressions to create a table with the header and the associated tag
labels <- sub(".*([CN])_.*", "\\1", header_names)
Group_Raw <- data.frame(Header = header_names, Label = labels)
header_names <- names(DatNorm)
labels <- sub(".*([CN])_.*", "\\1", header_names)
Group_Norm <- data.frame(Header = header_names, Label = labels)
#-------------------- TMM-Normalization --------------------#
dgellist <- DGEList(counts=geneCountHigh_M_Norm, group=factor(Group_Norm$Label))
dgellist <- calcNormFactors(dgellist,method = "TMM") #method ="upperquartile"
dgellist <- estimateCommonDisp(dgellist)
dgellist <-estimateTagwiseDisp(dgellist,trend="movingave")
Normalexpr <-dgellist$pseudo.counts
lNormexpr <- log(Normalexpr + 1)
#-------------------- QC & Plots --------------------#
pdf(file='Heatmap.pdf',width = 10,height=10)
heatmap(cor(lNormexpr))
dev.off()
# Boxplot Before Normalization
pdf(file='B_boxplot.pdf',width = 10,height=10)
par(mar=c(14,5,1,1))
boxplot(Expression_Raw,las = 2,ylim = c(0, 20),labels=FALSE,col="green")
mtext("Normal samples \n Before normalization",side=2,line = 2)
dev.off()
# Boxplot After Normalization
pdf(file='A_boxplot.pdf',width = 30,height=10)
par(mar=c(14,5,1,1))
boxplot(lNormexpr,las = 2,col="green",ylim = c(0, 20))
mtext("After normalization",side=2,line = 2)
dev.off()
pdf(file='MDS.pdf',width = 30,height=10)
plotMDS(dgellist)
dev.off()
#-------------------- Save 2 File --------------------#
write.table(lNormexpr, "Full_Normalized.csv",row.names=TRUE, na="",col.names=TRUE, sep=",")
write.table(lNormexpr, "Full_Normalized.txt", sep="\t",row.names=T, col.names=T, quote=F)
#-------------------- DEG Analysis (exact test) --------------------#
dge <- DGEList(counts=lNormexpr,group=factor(Group_Norm$Label))
dge <- estimateCommonDisp(dge)
dge <- estimateTagwiseDisp(dge)
# Perform the exact test
et <- exactTest(dge, pair=c(1, 2))
# Get the top DEGs across all genes
DEG <- topTags(et, n=Inf)$table
# Filter DEGs for those with |log2FC| > 1.5
DEG_1_5 <- DEG[abs(DEG$logFC) > 1.5, ]
# Calculate the percentage
percentage_DEG_1_5 <- nrow(DEG_1_5) / nrow(DEG) * 100
print(percentage_DEG_1_5)
View(DEG)
significant_DEGs <- subset(DEG, FDR <= 0.05)
n_significant <- nrow(significant_DEGs)
print(n_significant)
